/*
 * Created on 3 avr. 2014 ( Time 19:39:37 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package cn.ilongfei.jpa.modeltest.model.test.bookstore;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "EMPLOYEE"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="EMPLOYEE", schema="ROOT" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="EmployeeEntity.countAll", query="SELECT COUNT(x) FROM EmployeeEntity x" )
} )
public class EmployeeEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="CODE", nullable=false, length=4)
    private String     code         ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="FIRST_NAME", length=40)
    private String     firstName    ;

    @Column(name="LAST_NAME", nullable=false, length=40)
    private String     lastName     ;

    @Column(name="MANAGER")
    private Short      manager      ;

    @Column(name="EMAIL", length=60)
    private String     email        ;

	// "shopCode" (column "SHOP_CODE") is not defined by itself because used as FK in a link 
	// "badgeNumber" (column "BADGE_NUMBER") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="employee", targetEntity=ShopEntity.class)
    private List<ShopEntity> listOfShop  ;

    @ManyToOne
    @JoinColumn(name="SHOP_CODE", referencedColumnName="CODE")
    private ShopEntity shop        ;

    @ManyToMany(targetEntity=WorkgroupEntity.class)
    @JoinTable(name="EMPLOYEE_GROUP", 
      joinColumns=@JoinColumn(name="EMPLOYEE_CODE", referencedColumnName="CODE"),
      inverseJoinColumns=@JoinColumn(name="GROUP_ID", referencedColumnName="ID")
     ) 

    private List<WorkgroupEntity> listOfWorkgroup;

    @OneToMany(mappedBy="employee", targetEntity=BookOrderEntity.class)
    private List<BookOrderEntity> listOfBookOrder;

    @ManyToOne
    @JoinColumn(name="BADGE_NUMBER", referencedColumnName="BADGE_NUMBER")
    private BadgeEntity badge       ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public EmployeeEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setCode( String code ) {
        this.code = code ;
    }
    public String getCode() {
        return this.code;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : FIRST_NAME ( VARCHAR ) 
    public void setFirstName( String firstName ) {
        this.firstName = firstName;
    }
    public String getFirstName() {
        return this.firstName;
    }

    //--- DATABASE MAPPING : LAST_NAME ( VARCHAR ) 
    public void setLastName( String lastName ) {
        this.lastName = lastName;
    }
    public String getLastName() {
        return this.lastName;
    }

    //--- DATABASE MAPPING : MANAGER ( SMALLINT ) 
    public void setManager( Short manager ) {
        this.manager = manager;
    }
    public Short getManager() {
        return this.manager;
    }

    //--- DATABASE MAPPING : EMAIL ( VARCHAR ) 
    public void setEmail( String email ) {
        this.email = email;
    }
    public String getEmail() {
        return this.email;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfShop( List<ShopEntity> listOfShop ) {
        this.listOfShop = listOfShop;
    }
    public List<ShopEntity> getListOfShop() {
        return this.listOfShop;
    }

    public void setShop( ShopEntity shop ) {
        this.shop = shop;
    }
    public ShopEntity getShop() {
        return this.shop;
    }

    public void setListOfWorkgroup( List<WorkgroupEntity> listOfWorkgroup ) {
        this.listOfWorkgroup = listOfWorkgroup;
    }
    public List<WorkgroupEntity> getListOfWorkgroup() {
        return this.listOfWorkgroup;
    }

    public void setListOfBookOrder( List<BookOrderEntity> listOfBookOrder ) {
        this.listOfBookOrder = listOfBookOrder;
    }
    public List<BookOrderEntity> getListOfBookOrder() {
        return this.listOfBookOrder;
    }

    public void setBadge( BadgeEntity badge ) {
        this.badge = badge;
    }
    public BadgeEntity getBadge() {
        return this.badge;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(code);
        sb.append("]:"); 
        sb.append(firstName);
        sb.append("|");
        sb.append(lastName);
        sb.append("|");
        sb.append(manager);
        sb.append("|");
        sb.append(email);
        return sb.toString(); 
    } 

}
